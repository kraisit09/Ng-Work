import { assert } from 'chai';
import { Robot } from '../src/app/models/robot';

describe('Robot', () => {
  it('do nothing for the first price', () => {
    // arrange
    const rb = new Robot();

    // act
    const r = rb.process(800);

    // assert
    assert.equal(r, '');
  });

  it('Flow 1', () => {
    const rb = new Robot();

    const r1 = rb.process(800);
    const r2 = rb.process(802);
    const r3 = rb.process(804);
    const r4 = rb.process(805);

    assert.equal(r1, '');
    assert.equal(r2, 'LF @802.0 x 1');
    assert.equal(r3, 'LF @804.0 x 1');
    assert.equal(r4, '');
  });

  it('Flow 2', () => {
    const rb = new Robot();

    rb.process(800);
    rb.process(802); // b
    rb.process(804); // b
    rb.process(805);
    const r5 = rb.process(801);
    const r6 = rb.process(800);
    const r7 = rb.process(799); // sell
    const r8 = rb.process(797);
    const r9 = rb.process(795);
    const r10 = rb.process(800);
    const r11 = rb.process(802);

    assert.equal(r5, '');
    assert.equal(r6, '');
    assert.equal(r7, 'SF @799.0 x 1');
    assert.equal(r8, 'SF @797.0 x 1');
    assert.equal(r9, 'SF @795.0 x 1');
    assert.equal(r10, 'LF @800.0 x 1');
    assert.equal(r11, 'LF @802.0 x 1');
  });

  it('test case 1', () => {
    const prices = [
      852.5,
      852.0,
      852.0,
      852.5,
      853.5,
      854.0,
      853.5,
      854.0,
      853.5,
      853.0,
      853.5,
      854.0,
      854.5,
      854.0,
      854.5,
      856.5,
      856.0,
      856.5,
      857.0,
      857.0,
      856.5,
      857.0,
      856.5,
      856.0,
      855.5,
      855.0,
      855.5,
      855.0,
      855.5,
      856.0,
      856.5,
      857.0,
      857.5,
      857.0,
      856.5,
      857.0,
      856.5,
      857.0,
      857.5,
      858.0,
      858.5,
      859.2,
      859.0,
      858.5,
      859.0,
      858.5,
      858.0,
      858.5,
      859.0,
      858.0,
      858.5,
      859.0,
      859.5,
      859.0,
      859.5,
      859.0,
      858.5,
      859.0,
      859.5,
      859.0,
      858.5,
      858.0,
      858.5,
      859.0,
      858.5,
      858.0,
      858.5,
      857.5,
      858.0,
      857.5,
      858.0,
      858.5,
      858.0,
      858.5,
      858.0,
      858.5,
      858.0,
      858.5,
      859.0,
      858.5,
      859.0,
      859.5,
      859.0,
      858.0,
      857.0,
      856.5,
      857.0,
      857.5,
      857.0,
      857.5,
      855.0,
      854.5,
      854.2,
      854.5,
      855.5,
      856.0,
      855.5,
      856.0,
      856.5,
      856.0,
      855.5,
      856.0,
      855.5,
      856.0,
      856.5,
      857.5,
      857.0,
      857.5,
      858.5,
      859.2,
      859.0,
      858.5,
      859.0,
      858.5,
      858.0,
      858.5,
      858.0,
      857.5,
      858.0,
      857.5,
      858.5,
      858.0,
      858.5,
      859.5,
      860.5,
      861.0,
      861.1,
      861.0,
      861.5,
      861.0,
      861.5,
      862.0,
      861.5,
      861.0,
      861.5,
      862.0,
      861.5,
      861.0,
      861.5,
      861.0,
      861.5,
      861.0,
      860.5,
      860.0,
      859.5,
      860.0,
      861.0,
      860.5,
      860.0,
      860.5,
      860.0,
      860.5,
      860.0,
      859.5,
      859.0,
      858.5,
      859.0,
      859.5,
      860.0,
      859.5,
      859.0,
      859.5,
      860.0,
      860.5,
      861.0,
      860.5,
      860.0,
      859.5,
      860.0,
      860.5,
      861.0,
      861.5,
      861.0,
      861.5,
      862.0,
      863.0,
      863.0,
      863.5,
      864.0,
      864.5,
      864.0,
      863.5,
      864.0,
      863.5,
      864.0,
      863.5,
      864.0,
      863.5,
      863.0,
      863.5,
      864.0,
      864.5,
      865.0,
      865.2,
      865.0,
      864.5,
      865.0,
      865.5,
      866.0,
      865.5,
    ];

    const rb = new Robot();
    prices.forEach((p) => {
      const s = rb.process(p);
      if (s != '') {
        console.log(s);
      }
    });
  });
});
